r"""
Signed vector element for vector based oriented matroids.

---------------------------------------

This implements an oriented matroid element. Depending on the implementation
this can either be seen as a signed vector or covector.

AUTHORS:

- Aram Dermenjian (...): Initial version
"""

##############################################################################
#       Copyright (C) 2019 Aram Dermenjian <aram.dermenjian at gmail.com>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#
#  The full text of the GPL is available at:
#
#                  http://www.gnu.org/licenses/
##############################################################################
from sage.matroids.oriented_matroids.signed_subset_element import SignedSubsetElement


import copy

class SignedVectorElement(SignedSubsetElement):
    r"""
    Creates an oriented matroid element.

    INPUT:

    - ``parent`` -- the parent object of the element. Usually is a class
      generated by :class:`OrientedMatroid`.
    - ``data`` -- (default: ``None``) is a tuple with information. Can be
      given in one of the following formats:
        + **as a vector** -- this is a tuple of pluses, minuses, and zeroes.
        + **as three tuples** -- the first tuple is the positives, the second
          the negatives and the third the zeroes.
        + **as a dict** -- the dictionary should have keys *positives*,
          *negatives*, and *zeroes*.
    - ``groundset`` -- (default: ``None``) if not given will construct
      the groundset from the parent, or if none is created in the parent,
      using the elements found in the data.
    - ``positives`` -- (default: ``None``) alternative to ``data``. Should be
      a tuple of elements. Requires ``negatives`` to be set.
    - ``negatives`` -- (default: ``None``) alternative to ``data``. Should be
      a tuple of elements. Requires ``positives`` to be set.
    - ``zeroes`` -- (default: ``None``) alternative to ``data``. Should be a
      tuple of elements. Requires ``positives`` and ``negatives`` to be set.

    EXAMPLES:
    
    Some examples of element constructions::

        sage: from sage.matroids.oriented_matroids.signed_vector_element import SignedVectorElement
        sage: M = OrientedMatroid([[1],[-1]],key='circuit')
        sage: SignedVectorElement(M,data = (0,))
        (0)
        sage: SignedVectorElement(M,data = (1,))
        (1)
        sage: M = OrientedMatroid([[1],[-1]],key='circuit', groundset=['e'])
        sage: SignedVectorElement(M,data = (1,))
        (1)


    .. SEEALSO::

        - :class:`OrientedMatroid`
        - :class:`OrientedMatroids`
        - :class:`SignedSubsetElement`
    """
    def __init__(self, parent, data = None, groundset = None, positives=None, negatives=None, zeroes = None):
        """
        Initialize ``self``.
        """

        SignedSubsetElement.__init__(self,parent,data,groundset,positives,negatives,zeroes)
    

    def _repr_(self):
        """
        Return a representation depending on implementation.
        """

        p = map(str, self.positives())
        n = map(str, self.negatives())
        z = map(str, self.zeroes())
        return "(" + ','.join([str(self(e)) for e in self.groundset()]) + ")"

    def _latex_(self):
        """
        Return a latex representation depending on implementation.
        """
        p = map(str, self.positives())
        n = map(str, self.negatives())
        z = map(str, self.zeroes())
        return "\\left(" + ','.join([str(self(e)) for e in self.groundset()]) + "\\right)"

